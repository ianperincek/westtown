---
import navData from "@data/navData.json";
//import { Icon } from "astro-icon/components";
import FullScreenNav from "@components/FullScreenNav.astro";
import DarkModeToggle from "@components/DarkModeToggle.astro";
---

<!-- ============================================ --><!--                 Navigation                   --><!-- ============================================ -->
<header id="cs-navigation" class="cs-navigation">
  <div class="cs-container">
    <!--Nav Logo-->
    <a href="/" class="cs-logo" aria-label="back to home">
      <!-- <img
        src="/assets/svgs/westtownlogo_visually_appealing.svg"
        alt="West Town Websites logo"
        aria-hidden="true"
        decoding="async"
      /> -->
      <img
        src="/assets/svgs/logoagain2W.svg"
        alt=""
        aria-hidden="true"
        decoding="async"
      />
    </a>
    <!--Navigation List-->
    <nav id="openNav" class="cs-nav nav-toggle" role="navigation">
      <!--Mobile Nav Toggle-->
      <button
        class="cs-toggle"
        id="mobile-menu-toggle"
        aria-expanded="false"
        aria-controls="cs-expanded-ul"
        aria-label="Toggle mobile menu."
      >
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
        </div>
        Menu
      </button>
      <!-- We need a wrapper div so we can set a fixed height on the cs-ul in case the nav list gets too long from too many dropdowns being opened and needs to have an overflow scroll. This wrapper acts as the background so it can go the full height of the screen and not cut off any overflowing nav items while the cs-ul stops short of the bottom of the screen, which keeps all nav items in view no matter how mnay there are-->
      <!-- This also allows for easy substitution of CodeStitch navigations. Just replace the .cs-ul-wrapper in the new navigation with this one -->
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded-ul" class="cs-ul">
          {
            navData.map((entry) => (
              <li
                class:list={[
                  "cs-li",
                  { "cs-dropdown": entry.children?.length > 0 },
                ]}
              >
                {entry.children?.length > 0 ? (
                  // If entry has children in navData.json, create a button and a dropdown icon
                  <button
                    aria-expanded="false"
                    aria-controls={`submenu-${entry.key}`}
                    class:list={[
                      "cs-li-link cs-dropdown-button",
                      { "cs-active": Astro.url.pathname.includes(entry.url) },
                    ]}
                  >
                    {entry.key}
                  </button>
                ) : (
                  // If entry does not have children in navData.json, create an anchor
                  <a
                    href={entry.url}
                    class:list={[
                      "cs-li-link",
                      { "cs-active": Astro.url.pathname === entry.url },
                    ]}
                    aria-current={
                      Astro.url.pathname === entry.url ? "page" : undefined
                    }
                  >
                    {entry.key}
                  </a>
                )}

                {entry.children?.length > 0 && (
                  // If entry has children in navData.json, create a drop down menu
                  <ul id={`submenu-${entry.key}`} class="cs-drop-ul">
                    {entry.children.map((child) => (
                      <li class="cs-drop-li">
                        <a
                          href={child.url}
                          class="cs-li-link cs-drop-link"
                          aria-current={
                            Astro.url.pathname === child.url
                              ? "page"
                              : undefined
                          }
                        >
                          {child.key}
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))
          }
        </ul>
      </div>
    </nav>
    <FullScreenNav />
    <a
      href="/contact"
      class="cs-button cs-button-solid cs-nav-button js-nav-button"
      >Start a Project</a
    >
    <!--Dark Mode toggle: remove component if you don't want to enable a dark mode toggle-->
    <!-- <DarkModeToggle /> -->
  </div>
</header>

<style lang="scss">
  /*-- -------------------------- -->
<---     Mobile Navigation      -->
<--- -------------------------- -*/
  body {
    background: var(--secondaryBgLight);
  }

  /* Mobile - 1023px */

  body {
    &.cs-open {
      overflow: hidden;
    }
  }

  // .cs-nav {
  //   padding-right: 3rem;
  // }

  .cs-navigation {
    font-family: "Roboto", "Arial", sans-serif;
    width: 100%;
    /* prevents padding from affecting height and width */
    box-sizing: border-box;
    padding: calc(12 / 16 * 1rem) calc(16 / 16 * 1rem);
    // background-color: #fff;
    // box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
    // position: fixed;
    position: relative;
    z-index: 10000;
    border-bottom: 2px solid var(--accent);
    background: var(--headerColor);

    &:before {
      /* black blurred overlay */
      content: "";
      width: 0%;
      height: 100vh;
      background: rgba(0, 0, 0, 0.6);
      opacity: 0;
      display: block;
      position: absolute;
      top: 100%;
      right: 0;
      z-index: -11;
      transition:
        width 0.5s,
        opacity 0.3s;
      -webkit-backdrop-filter: blur(10px);
      backdrop-filter: blur(10px);
    }

    &.cs-active {
      &:before {
        width: 100%;
        opacity: 1;
      }

      .cs-ul-wrapper {
        opacity: 1;
        visibility: visible;
        transform: scaleX(1);
        transition-delay: 0.2s;
      }

      .cs-li {
        opacity: 1;
        transform: translateX(0);
      }
    }

    .cs-container {
      width: 100%;
      display: flex;
      justify-content: flex-end;
      align-items: center;
    }

    .cs-logo {
      width: 40%;
      //.  max-width: calc(80 / 16 * 1rem);
      height: 100%;
      margin: 0 auto 0 0;
      /* prevents padding from affecting height and width */
      box-sizing: border-box;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10;

      img {
        width: 100%;
        height: 100%;
        /* ensures the image never overflows the container. It stays contained within it's width and height and expands to fill it then stops once it reaches an edge */
        object-fit: contain;
        /* places the image to the left edge of the parent */
        object-position: left;
      }
    }

    .cs-toggle {
      /* 44px - 48px */
      width: clamp(5.75rem, 6vw, 3rem);
      height: 23px;
      margin: 0 0 0 auto;
      background-color: transparent;
      border: none;
      border-radius: calc(4 / 16 * 1rem);
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.2rem;
      //color: var(--bodyTextColor);
      color: var(--secondaryBgLight);
    }

    .cs-active {
      .cs-line1 {
        top: 50%;
        transform: translate(-50%, -50%) rotate(225deg);
        width: 100%;
      }

      .cs-line2 {
        top: 50%;
        transform: translate(-50%, -50%) translateY(0) rotate(-225deg);
        transform-origin: center;
        width: 80%;
      }
    }

    .cs-box {
      /* 24px - 28px */
      width: clamp(1.5rem, 2vw, 1.75rem);
      /* 14px - 16px */
      height: clamp(0.875rem, 1.5vw, 1rem);
      position: relative;
      margin-right: 10px;
    }

    .cs-line {
      width: 100%;
      height: 3px;
      border-radius: 2px;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      background-color: var(--secondaryBgLight);
    }

    .cs-line1 {
      top: 0;
      width: 100%;
      transition:
        transform 0.5s,
        top 0.3s,
        left 0.3s;
      animation-duration: 0.7s;
      animation-timing-function: ease;
      animation-direction: normal;
      animation-fill-mode: forwards;
      transform-origin: center;
    }

    .cs-line2 {
      top: 80%;
      right: 0;
      width: 80%;
      transform: translateX(-40%) translateY(-50%);
      transition:
        top 0.3s,
        left 0.3s,
        transform 0.5s;
      animation-duration: 0.7s;
      animation-timing-function: ease;
      animation-direction: normal;
      animation-fill-mode: forwards;
    }

    .cs-line3 {
      bottom: 0;
      transition:
        bottom 0.3s,
        opacity 0.3s;
    }

    .cs-ul-wrapper {
      height: 100vh;
      background-color: #fff;
      box-shadow: inset rgba(0, 0, 0, 0.2) 0px 8px 24px;
      opacity: 0;
      visibility: hidden;
      position: absolute;
      top: 100%;
      right: 0;
      left: auto;
      z-index: -1;
      overflow: hidden;
      transform: scaleX(0);
      transition:
        transform 0.4s,
        opacity 0.3s;
      transform-origin: top right;
    }

    .cs-ul {
      width: auto;
      min-width: 40%;
      height: 65vh;
      margin: 0;
      /* 28px - 40px */
      padding: 3rem clamp(1.75rem, 3vw, 2.5rem) 2rem 4.375rem;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-end;
      gap: calc(20 / 16 * 1rem);
      overflow: scroll;
    }

    .cs-li {
      text-align: right;
      list-style: none;
      width: 100%;
      margin-right: 0;
      opacity: 0;
      /* transition from these values */
      transform: translateX(-40/16rem);
      transition:
        transform 0.6s,
        opacity 0.9s;

      &:nth-of-type(1) {
        transition-delay: 0.05s;
      }
      &:nth-of-type(2) {
        transition-delay: 0.1s;
      }
      &:nth-of-type(3) {
        transition-delay: 0.15s;
      }
      &:nth-of-type(4) {
        transition-delay: 0.2s;
      }
      &:nth-of-type(5) {
        transition-delay: 0.25s;
      }
      &:nth-of-type(6) {
        transition-delay: 0.3s;
      }
      &:nth-of-type(7) {
        transition-delay: 0.35s;
      }
      &:nth-of-type(8) {
        transition-delay: 0.4s;
      }
      &:nth-of-type(9) {
        transition-delay: 0.45s;
      }
    }

    .cs-li-link {
      /* 16px - 24px */
      font-size: clamp(1rem, 2.5vw, 1.5rem);
      color: inherit;
      line-height: 1.2em;
      text-decoration: none;
      margin: 0;
      display: inline-block;
      position: relative;

      &:before {
        /* active state underline */
        content: "";
        width: 100%;
        height: 1px;
        background: currentColor;
        opacity: 1;
        display: none;
        position: absolute;
        bottom: calc(-2 / 16 * 1rem);
        left: 0;
      }

      &.cs-active {
        &:before {
          display: block;
        }
      }
    }
  }

  .cs-button-solid {
    background-color: var(--headerColor);
    padding: 7px 10px;
    color: #fff;
    text-decoration: none;
    border-radius: 16px;
    height: auto;
    line-height: 1.5rem;
  }

  /* Dark Mode */
  @media only screen and (max-width: 63.9375rem) {
    body.dark-mode {
      .cs-navigation {
        // background-color: var(--dark);

        .cs-logo {
          /* makes it white */
          filter: grayscale(1) brightness(1000%);
        }

        .cs-line {
          background-color: #fff;
        }

        .cs-ul-wrapper {
          background-color: var(--medium);
        }

        .cs-li-link {
          color: var(--bodyTextColorWhite);
        }
      }
    }
  }

  /*-- -------------------------- -->
<---     Navigation Dropdown    -->
<--- -------------------------- -*/

  /* Mobile - 1023px */
  @media only screen and (max-width: 63.9375rem) {
    .cs-navigation {
      .cs-dropdown {
        color: var(--headerColor);
        position: relative;

        &.cs-active {
          .cs-drop-ul {
            height: auto;
            margin: 0.75rem 0 0 0;
            padding: 1.5rem;
            opacity: 1;
            visibility: visible;
            transform: scale(1);
          }

          .cs-drop-link {
            opacity: 1;
          }

          .cs-drop-icon {
            transform: rotate(0);
          }
        }

        .cs-li-link {
          position: relative;
          transition: opacity 0.3s;
        }
      }

      .cs-drop-icon {
        width: 0.9375rem;
        height: auto;
        display: inline-block;
        color: inherit;
        transform: rotate(180deg);
        transition: 0.3s;
      }

      .cs-drop-ul {
        width: 100%;
        height: 0;
        margin: 0;
        box-sizing: border-box;
        padding: 0 1.5rem 0 1.5rem;
        background-color: var(--primary);
        opacity: 0;
        display: flex;
        visibility: hidden;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-end;
        gap: 0.75rem;
        overflow: hidden;
        transform: scale(0);
        transition:
          padding 0.3s,
          margin 0.3s,
          height 0.3s,
          opacity 0.3s,
          transform 0.3s,
          visibility 0.3s;
        transform-origin: top right;
      }

      .cs-drop-li {
        text-align: inherit;
        list-style: none;
      }

      .cs-li-link {
        &.cs-drop-link {
          font-size: clamp(0.875rem, 2vw, 1.25rem);
          color: #fff;
        }
      }

      .cs-dropdown-button {
        background-color: transparent;
        border: none;
        appearance: none;
      }
    }
  }

  /* Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    .cs-navigation {
      .cs-dropdown {
        position: relative;

        &:hover,
        &.cs-active {
          cursor: pointer;

          .cs-drop-ul {
            opacity: 1;
            visibility: visible;
            transform: scaleY(1);
          }

          .cs-drop-li {
            opacity: 1;
            transform: translateY(0);
          }
        }
      }

      .cs-dropdown:has(.cs-drop-icon) {
        display: flex;
        align-items: center;

        &:hover {
          .cs-drop-icon {
            transform: rotate(0);
          }
        }
      }

      .cs-drop-icon {
        width: 0.9375rem; // (15/16rem)
        height: auto;
        display: inline-block;
        color: inherit;
        transform: rotate(180deg);
        transition: 0.3s;
      }

      .cs-drop-ul {
        min-width: 12.5rem; // (200/16rem)
        margin: 0;
        padding: 0;
        background-color: #fff;
        box-shadow: rgba(149, 157, 165, 0.2) 0px 10px 16px;
        opacity: 0;
        border-bottom: 5px solid var(--primary);
        visibility: hidden;
        // columns: 2;
        position: absolute;
        top: 100%;
        z-index: -100;
        overflow: hidden;
        transform: scaleY(0);
        transition:
          transform 0.3s,
          visibility 0.3s,
          opacity 0.3s;
        transform-origin: top;
      }

      .cs-drop-li {
        font-size: 1rem; // (16 / 16 * 1rem)
        text-decoration: none;
        list-style: none;
        width: 100%;
        height: auto;
        color: var(--bodyTextColor);
        opacity: 0;
        display: block;
        transform: translateY(-0.625rem); // (-10/16rem)
        transition:
          opacity 0.6s,
          transform 0.6s;

        &:nth-of-type(1) {
          transition-delay: 0.05s;
        }
        &:nth-of-type(2) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.15s;
        }
        &:nth-of-type(4) {
          transition-delay: 0.2s;
        }
        &:nth-of-type(5) {
          transition-delay: 0.25s;
        }
        &:nth-of-type(6) {
          transition-delay: 0.3s;
        }
        &:nth-of-type(7) {
          transition-delay: 0.35s;
        }
        &:nth-of-type(8) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(9) {
          transition-delay: 0.45s;
        }
        &:nth-of-type(10) {
          transition-delay: 0.5s;
        }
        &:nth-of-type(11) {
          transition-delay: 0.55s;
        }
        &:nth-of-type(12) {
          transition-delay: 0.6s;
        }
        &:nth-of-type(13) {
          transition-delay: 0.65s;
        }
      }

      .cs-li-link {
        &.cs-drop-link {
          font-size: 1rem; // (16 / 16 * 1rem)
          line-height: 1.5em;
          text-decoration: none;
          white-space: nowrap;
          width: 100%;
          box-sizing: border-box;
          padding: 0.75rem; // (12 / 16 * 1rem)
          color: var(--bodyTextColor);
          display: block;
          transition:
            color 0.3s,
            background-color 0.3s;

          &:hover {
            background-color: #f7f7f7;
          }

          &:focus-within {
            outline: 2px solid currentColor;
            outline-offset: -2px;
          }

          &:before {
            display: none;
          }
        }
      }

      .cs-dropdown-button {
        background-color: transparent;
        border: none;
        appearance: none;
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
    body.dark-mode {
      .cs-navigation {
        .cs-drop-ul {
          background-color: var(--dark);
        }

        .cs-li-link {
          &.cs-drop-link {
            &:hover {
              background-color: var(--medium);
            }
          }
        }

        .cs-drop-icon {
          /* turns it white */
          filter: grayscale(1) brightness(1000%);
        }
      }
    }
  }

  /*-- -------------------------- -->
<---     Desktop Navigation     -->
<--- -------------------------- -*/

  /* Small Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    .cs-navigation {
      /* remove the font family so the Stitch inherits the fonts from your global stylesheet */
      font-family: "Roboto", "Arial", sans-serif;
      width: 100%;
      /* prevents padding from affecting height and width */
      box-sizing: border-box;
      padding: 0 1rem; // (16 / 16rem * 1)
      // background-color: #fff;
      //box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
      //position: fixed;
      position: relative;
      z-index: 10000;
      padding-right: 13rem;

      .cs-container {
        width: 100%;
        max-width: 80rem; // (1280/16rem)
        margin: auto;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 1.5rem; // (24/16rem)
      }

      .cs-logo {
        // width: 18.4%;
        max-width: 21.875rem; // (350/16rem)
        height: 4.0625rem; // (65/16rem)
        /* margin-right auto pushes everything away from it to the right */
        margin: 0 auto 0 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 100;

        img {
          width: 100%;
          height: 100%;
          /* ensures the image never overflows the container. It stays contained within it's width and height and expands to fill it then stops once it reaches an edge */
          object-fit: contain;
        }
      }

      .cs-ul {
        width: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        /* 20px - 36px */
        gap: clamp(1.25rem, 2.6vw, 2.25rem);
      }

      .cs-li {
        list-style: none;
        padding: 2rem 0; // (32/16rem) 0
        /* prevent flexbox from squishing it */
        flex: none;
      }

      .cs-li-link {
        /* 14px - 16px */
        font-size: clamp(0.875rem, 1vw, 1rem);
        line-height: 1.5em;
        text-decoration: none;
        margin: 0;
        color: var(--bodyTextColor);
        display: block;
        position: relative;

        &:hover {
          &:before {
            width: 100%;
          }
        }

        &.cs-active {
          &:before {
            width: 100%;
          }
        }

        &:before {
          /* active state underline */
          content: "";
          width: 0%;
          height: 2px;
          background: var(--primary);
          opacity: 1;
          display: block;
          position: absolute;
          bottom: 0rem;
          left: 0;
          transition: width 0.3s;
        }
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 64rem) {
    body.dark-mode {
      .cs-navigation {
        background-color: var(--dark);

        .cs-logo {
          /* makes it turn white */
          filter: grayscale(1) brightness(1000%);
        }

        .cs-li-link {
          color: var(--bodyTextColorWhite);
        }

        .cs-li-link {
          &:before {
            background-color: var(--primaryLight);
          }
        }
      }
    }
  }

  .cs-nav-button {
    position: fixed;
    top: 0.8125rem;
    right: 1.25rem;
    transform-origin: right center;
    z-index: 100;
    height: 2.375rem;

    @media screen and (min-width: 48rem) {
    }

    @media screen and (min-width: 64rem) {
    }
    @media screen and (max-width: 63.99rem) {
      display: none;
    }
  }
</style>

<script is:inline>
  // Astro:page-load wrapper for View Transitions purposes
  document.addEventListener("astro:page-load", () => {
    // Make the script controlling the <Hamburger /> mobile menu component available after navigating to a new page.

    const CSbody = document.querySelector("body");
    const CSnavbarMenu = document.getElementById("cs-navigation");
    const CSUlWrapper = document.getElementById("cs-ul-wrapper");
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");

    function toggleMenu() {
      mobileMenuToggle.classList.toggle("cs-active");
      CSnavbarMenu.classList.toggle("cs-active");
      CSbody.classList.toggle("cs-open");
    }

    // Toggles the hamburger mobile menu
    mobileMenuToggle.addEventListener("click", function () {
      toggleMenu();
      ariaExpanded(mobileMenuToggle);
    });

    // Checks the value of aria expanded on an element and changes it accordingly whether it is expanded or not
    function ariaExpanded(element) {
      const isExpanded = element.getAttribute("aria-expanded");
      element.setAttribute(
        "aria-expanded",
        isExpanded === "false" ? "true" : "false"
      );
    }

    // Add event listeners to each dropdown element for accessibility
    const dropdownElements = document.querySelectorAll(".cs-dropdown");
    dropdownElements.forEach((element) => {
      // This variable tracks if the Escape key was pressed. This flag will be checked in the focusout event handler to ensure that pressing the Escape key does not trigger the focusout event and subsequently remove the cs-active class from the dropdown
      let escapePressed = false;

      element.addEventListener("focusout", function (event) {
        if (escapePressed) {
          escapePressed = false;
          return; // Skip the focusout logic if escape was pressed
        }
        // If the focus has moved outside the dropdown, remove the active class from the dropdown
        if (!element.contains(event.relatedTarget)) {
          element.classList.remove("cs-active");
          // adjust aria-expanded attribute on the dropdown button only
          const dropdownButton = element.querySelector(".cs-dropdown-button");
          if (dropdownButton) {
            ariaExpanded(dropdownButton);
          }
        }
      });

      element.addEventListener("keydown", function (event) {
        const dropdownButton = element.querySelector(".cs-dropdown-button");
        // If the dropdown is active, stop the event from propagating. This is so we can use Escape to close the dropdown, then press it again to close the hamburger menu (if needed)
        if (element.classList.contains("cs-active")) {
          event.stopPropagation();
        }

        // Pressing Enter or Space will toggle the dropdown and adjust the aria-expanded attribute
        if (event.key === "Enter" || event.key === " ") {
          event.preventDefault();

          element.classList.toggle("cs-active");
          // adjust aria-expanded attribute on the dropdown button only
          if (dropdownButton) {
            ariaExpanded(dropdownButton);
          }
        }

        // Pressing Escape will remove the active class from the dropdown. The stopPropagation above will stop the hamburger menu from closing
        if (event.key === "Escape") {
          escapePressed = true;
          element.classList.remove("cs-active");
          // adjust aria-expanded attribute on the dropdown button only
          if (dropdownButton) {
            ariaExpanded(dropdownButton);
          }
        }
      });

      // Handles dropdown menus on mobile - the matching media query (max-width: 63.9375rem) is necessary so that clicking the dropdown button on desktop does not add the active class and thus interfere with the hover state
      const maxWidthMediaQuery = window.matchMedia("(max-width: 63.9375rem)");
      if (maxWidthMediaQuery.matches) {
        element.addEventListener("click", (e) => {
          element.classList.toggle("cs-active");
          const dropdownButton = element.querySelector(".cs-dropdown-button");
          if (dropdownButton) {
            ariaExpanded(dropdownButton);
          }
        });

        // If you press Escape and the hamburger menu is open, close it
        document.addEventListener("keydown", (event) => {
          if (
            event.key === "Escape" &&
            mobileMenuToggle.classList.contains("cs-active")
          ) {
            toggleMenu();
          }
        });
      }
    });

    // Pressing Enter will redirect to the href
    const dropdownLinks = document.querySelectorAll(
      ".cs-drop-li > .cs-li-link"
    );
    dropdownLinks.forEach((link) => {
      link.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
          window.location.href = this.href;
        }
      });
    });
  });
</script>

<script defer is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    gsap.registerPlugin(ScrollTrigger);

    gsap.matchMedia().add("(min-width: 1024px)", () => {
      const navButton = document.querySelector(".js-nav-button");
      const toggleButton = document.querySelector(".cs-toggle");

      if (!navButton) {
        console.error("Navigation button not found in the DOM.");
        return;
      }

      navButton.style.position = "fixed";
      navButton.style.right = "10";

      // navButton.style.transform = "translateY(-50%)";

      ScrollTrigger.create({
        trigger: document.body,
        start: "500px",
        end: "0",
        onEnter: () => {
          gsap.to(navButton, {
            x: "0",
            y: window.innerHeight / 2 - navButton.offsetHeight / 2 + "px",

            rotate: -90,
            duration: 1,
            ease: "power2.out",
            immediateRender: false,
          });
        },
        onLeaveBack: () => {
          gsap.to(navButton, {
            x: 0,
            y: 0,
            rotate: 0,
            duration: 1,

            ease: "power2.out",
            immediateRender: false,
          });
        },
      });
    });
  });
</script>

<script>
  document.getElementById("openNav").addEventListener("click", () => {
    document.querySelector(".full-screen-nav").classList.add("open-nav");
  });

  document.querySelector(".close-nav").addEventListener("click", () => {
    document.querySelector(".full-screen-nav").classList.remove("open-nav");
  });
</script>
