---
import BaseLayout from "src/layouts/BaseLayout.astro";
import CTA from "@components/CTA.astro";
import Introduction from "@components/TemplateComponents/Introduction.astro";
import Pricing from "@components/TemplateComponents/Pricing.astro";

import Services from "@components/TemplateComponents/Services.tsx";
import serviceData from "../data/serviceData.json";
import Review from "@components/TemplateComponents/Review";
import Hero from "@components/TemplateComponents/Hero.tsx";
import Portfolio from "@components/TemplateComponents/Portfolio.astro";
import BlogList from "@components/TemplateComponents/BlogList.astro";
---

<BaseLayout
  title="West Town Websites | Chicago Web Design and Seo Optimization Web Design Services for Small Business | Custom Web Page Design"
  description="Chicago's affordable web design services for small business owners. Get a custom small business web page design starting at just $175/month with our expert web page designers."
>
  <Hero />

  <Services services={serviceData} />
  <Introduction />
  <Portfolio />
  <Review />

  <Pricing />
  <BlogList />

  <CTA
    alt="Image of business growth"
    title="Let's Work Together!"
    description="Are you a small business owner looking to boost online sales and grow your brand? Letâ€™s work together and build a stronger online presence that sets your small business apart."
    buttonText="Get an Estimate Now"
    buttonLink="/contact"
  />

  <style lang="scss">
    .main {
      margin-top: -68px;

      @media (min-width: 48rem) {
        margin-top: -87px;
      }
    }

    /* Dark Mode */
    @media only screen and (min-width: 0em) {
      body.dark-mode {
        .hero__wrap {
          .cs-background {
            &:before {
              opacity: 0.8;
            }
          }
        }
      }
    }

    /* Dark mode */
    @media only screen and (min-width: 0em) {
      body.dark-mode {
        #services {
          background: var(--medium);

          picture {
            background: var(--primaryDark);
          }

          h2 {
            font-weight: bold;
            color: #fff;
          }
        }
      }
    }

    /* PAGE-SPECIFIC STYLES FOR THE HOME PAGE */

    /*-- -------------------------- -->
<---       Side By Side         -->
<--- -------------------------- -*/

    /* Mobile - 360px */
    @media only screen and (min-width: 0em) {
      .sbs {
        padding: var(--sectionPadding);

        .cs-container {
          width: 100%;
          max-width: 80rem;
          margin: auto;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          row-gap: 2.5rem;
        }

        .cs-left {
          /* scaling the font size with the view width */
          font-size: min(2.31vw, 0.7em);
          /* using ems so we can use font size to scale the whole section */
          width: 39.4375em;
          height: 39.75em;
          position: relative;
        }

        .cs-picture {
          border-radius: 1.5em;
          display: block;
          position: absolute;
          /* clips img tag corners */
          overflow: hidden;

          img {
            width: 100%;
            height: 100%;
            /* makes image act like a background image */
            object-fit: cover;
            position: absolute;
            top: 0;
            left: 0;
          }
        }

        .cs-picture1 {
          width: 32.625em;
          height: 36.3125em;
          top: 0;
          left: 0;
        }

        .cs-picture2 {
          width: 25.875em;
          height: 25em;
          background-color: #fff;
          box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 40px;
          /* 6px - 12px */
          border: clamp(0.375em, 1.5vw, 0.75em) solid #fff;
          right: 0;
          bottom: 0;
        }

        .cs-right {
          max-width: 33.875rem;
          margin: auto;

          h2,
          h3,
          h4,
          p {
            color: var(--bodyTextColorWhite);
          }
        }

        .cs-flex-group {
          /* 16px - 32px */
          padding: clamp(1rem, 3vw, 2rem);
          background-color: #f7f7f7;
          border-radius: 1rem;
          position: fixed;

          p {
            color: var(--bodyTextColor);
          }
        }

        .cs-flex-p {
          /* 14px - 16px */
          font-size: clamp(0.875rem, 1.5vw, 1rem);
          line-height: 1.5em;
          margin: 0 0 1rem;
          color: #353535;
          position: relative;
          z-index: 5;
        }

        .cs-name {
          font-size: 1rem;
          font-weight: bold;
          line-height: 1.2em;
          text-transform: uppercase;
          margin: 0 0 0.25rem;
          color: var(--headerColor);
          display: block;
        }
      }
    }

    .mil-lines-place {
      position: absolute;
      top: -120px;
      left: -22.5%;
      opacity: 1;
      margin-top: 0;
      -webkit-transition: 0.6s;
      transition: 0.6s;
      -webkit-transition-delay: 0.3s;
      transition-delay: 0.3s;
    }
    .mil-lines-place .mil-lines {
      opacity: 0.05;
      pointer-events: none;
    }

    @media only screen and (min-width: 48em) {
      body {
        opacity: 0;
        transition: opacity 0.5s ease-in;
      }
    }

    body.loaded {
      opacity: 1;
    }
  </style>

  <style is:global>
    @media only screen and (min-width: 48em) {
      .cs-title,
      .cs-topper,
      .cs-text,
      .cs-button,
      .cs-picture {
        will-change: opacity, transform;
      }

      h1 {
        clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0 100%);
        transform: translateY(100px);
        opacity: 0;
      }

      .cs-text-alt {
        opacity: 0;
      }

      .cs-topper,
      .cs-text,
      .cs-button {
        opacity: 0;
        transform: translateY(50px);
      }

      /* Specific tweaks for more control */
      .cs-title {
        clip-path: polygon(0 100%, 100% 100%, 100% 100%, 0 100%);
        opacity: 0;
        transform: translateY(
          100px
        ); /* More dramatic initial drop for the title */
      }
    }

    .cs-button {
      transform: translateY(30px); /* Less dramatic move for buttons */
    }
  </style>

  <script defer>
    function addLoadedClass() {
      document.body.classList.add("loaded");
    }

    // Initial load
    addLoadedClass();

    // Run after every page navigation
    document.addEventListener("astro:afterRender", () => {
      addLoadedClass();
    });
  </script>

  <script defer>
    document.addEventListener("DOMContentLoaded", () => {
      // let panels = gsap.utils.toArray(".panel"),
      //   observer = ScrollTrigger.normalizeScroll(true),
      //   scrollTween,
      //   currentPanelIndex = 0;
      // document.addEventListener(
      //   "touchstart",
      //   (e) => {
      //     if (
      //       scrollTween &&
      //       e.target.tagName !== "BUTTON" &&
      //       e.target.tagName !== "A"
      //     ) {
      //       e.preventDefault();
      //       e.stopImmediatePropagation();
      //     }
      //   },
      //   { capture: true, passive: false }
      // );
      // function goToSection(i) {
      //   if (scrollTween) return;
      //   scrollTween = gsap.to(window, {
      //     scrollTo: { y: i * innerHeight, autoKill: true },
      //     onStart: () => observer.disable(),
      //     onInterrupt: () => observer.enable(),
      //     onComplete: () => {
      //       observer.enable();
      //       scrollTween = null;
      //       currentPanelIndex = i;
      //     },
      //     duration: 1,
      //     overwrite: true,
      //   });
      // }
      // panels.forEach((panel, i) => {
      //   ScrollTrigger.create({
      //     trigger: panel,
      //     start: "top bottom",
      //     end: "+=199%",
      //     onToggle: (self) => self.isActive && !scrollTween && goToSection(i),
      //   });
      // });
      // ScrollTrigger.create({
      //   start: 0,
      //   end: "max",
      //   snap: {
      //     snapTo: 1 / (panels.length - 1),
      //     duration: { min: 0.2, max: 0.3 },
      //     delay: 0.2,
      //     ease: "power1.inOut",
      //   },
      // });
      // f;
      // window.addEventListener("resize", () => {
      //   gsap.set(window, {
      //     scrollTo: { y: currentPanelIndex * window.innerHeight },
      //   });
      // });
    });
  </script>

  <client:only>
    <script is:inline defer>
      document.addEventListener("DOMContentLoaded", () => {
        let tl = gsap.timeline({
          defaults: { ease: "power4.out", duration: 1 },
        });

        tl.to(".hero__wrap", {
          opacity: 1,

          duration: 0.3,
        });

        tl.to(".cs-title", {
          "clip-path": "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
          opacity: 1,
          transform: "translateY(0)",
          duration: 0.3,
        });

        tl.to(
          ".cs-text",
          {
            opacity: 1,
            transform: "translateY(0)",
            duration: 0.3,
          },
          "startTextAndPic"
        );
        tl.to(
          ".cs-text-alt",
          {
            opacity: 1,
            transform: "translateY(0)",
            duration: 0.3,
          },
          "startTextAndPic"
        )

          .to(
            ".cs-picture",
            {
              opacity: 1,
              transform: "translateY(0)",
              duration: 0.5,
            },
            "startTextAndPic"
          );

        tl.to(".cs-topper", {
          opacity: 1,
          transform: "translateY(0)",
          duration: 0.3,
        });

        tl.to(".cs-button", {
          opacity: 1,
          transform: "translateY(0)",
          stagger: 0.2,
        });

        const flexGroup = document.querySelector(".cs-flex-group");
        const picture = document.querySelector(".cs-picture");

        let debounceTimer;
        window.addEventListener("scroll", () => {
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => {
            const scrollTop =
              window.pageYOffset || document.documentElement.scrollTop;
            const flexGroupTranslateX = scrollTop * -0.3;
            const pictureTranslateX = scrollTop * 0.3;
            flexGroup.style.transform = `translateX(${flexGroupTranslateX}px)`;
            picture.style.transform = `translateX(${pictureTranslateX}px)`;
          }, 10);
        });
      });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Ensure GSAP is available
        if (typeof gsap === "undefined") {
          console.error("GSAP is not loaded.");
          return;
        }

        const services = document.querySelectorAll(".services__item");

        services.forEach((service) => {
          const overlay = service.querySelector(".service__overlay");
          const details = overlay.querySelector(".service__details");

          // Set initial states
          gsap.set(overlay, { backgroundColor: "rgba(0, 0, 0, 0)" });
          gsap.set(details, { opacity: 0, y: 20 });

          // Create hover animation timeline
          const hoverTimeline = gsap.timeline({ paused: true });

          hoverTimeline
            .to(overlay, {
              backgroundColor: "rgba(0, 0, 0, 0.7)",
              duration: 0.5,
              ease: "power2.out",
            })
            .to(
              details,
              { opacity: 1, y: 0, duration: 0.5, ease: "power2.out" },
              "-=0.3"
            );

          // Function to check if it's a touch device
          const isTouchDevice =
            "ontouchstart" in window || navigator.maxTouchPoints > 0;

          if (!isTouchDevice) {
            // Event listeners for mouse devices
            service.addEventListener("mouseenter", () => hoverTimeline.play());
            service.addEventListener("mouseleave", () =>
              hoverTimeline.reverse()
            );
          } else {
            // For touch devices: toggle animation on tap (click event for touch)
            let isToggled = false;
            service.addEventListener("click", () => {
              if (!isToggled) {
                hoverTimeline.play();
                isToggled = true;
              } else {
                hoverTimeline.reverse();
                isToggled = false;
              }
            });
          }
        });
      });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        gsap.registerPlugin(ScrollTrigger);

        gsap.utils
          .toArray(".service--image-right .service__image-wrapper")
          .forEach((el) => {
            gsap.from(el, {
              scrollTrigger: {
                trigger: el,
                start: "top 90%",
                end: "bottom 50%",
                scrub: true,
                toggleActions: "play none none reverse",
              },
              x: "-100%", // Start from 150px to the left
              opacity: 0,
              duration: 1.5,
              ease: "power3.out",
            });
          });

        gsap.utils
          .toArray(".service--image-right .service__content")
          .forEach((el) => {
            gsap.from(el, {
              scrollTrigger: {
                trigger: el,
                start: "top 90%",
                end: "bottom 50%",
                scrub: true,
                toggleActions: "play none none reverse",
              },
              x: "100%", // Start from 150px to the right
              opacity: 0,
              duration: 1.5,
              ease: "power3.out",
            });
          });

        // Animate .service--image-left elements from right off canvas
        gsap.utils
          .toArray(".service--image-left .service__content")
          .forEach((el) => {
            gsap.from(el, {
              scrollTrigger: {
                trigger: el,
                start: "top 90%",
                end: "bottom 50%",
                scrub: true,
                toggleActions: "play none none reverse",
              },
              x: "-100%", // Start from 150px to the left
              opacity: 0,
              duration: 1.5,
              ease: "power3.out",
            });
          });

        gsap.utils
          .toArray(".service--image-left .service__image-wrapper")
          .forEach((el) => {
            gsap.from(el, {
              scrollTrigger: {
                trigger: el,
                start: "top 90%",
                end: "bottom 50%",
                scrub: true,
                toggleActions: "play none none reverse",
              },
              x: "100%", // Start from 150px to the right
              opacity: 0,
              duration: 1.5,
              ease: "power3.out",
            });
          });
      });
    </script>
  </client:only>
</BaseLayout>
